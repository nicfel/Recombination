/*
 * Copyright (C) 2015 Tim Vaughan <tgvaughan@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package recombination.annotator;

import beast.base.core.Log;
import beast.base.evolution.tree.Tree;
import beast.base.util.DiscreteStatistics;
import recombination.network.BreakPoints;
import recombination.network.RecombinationNetwork;
import recombination.network.RecombinationNetworkEdge;
import recombination.network.RecombinationNetworkNode;
import recombination.statistics.DotConverter;

import javax.swing.*;
import javax.swing.border.EtchedBorder;
import java.awt.*;
import java.io.*;
import java.lang.reflect.InvocationTargetException;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

/**
 * A rewrite of TreeAnnotator targeted at summarizing ACG logs
 * generated by bacter.
 * 
 * @author Tim Vaughan <tgvaughan@gmail.com>
 * @author Nicola Felix MÃ¼ller <nicola.felix.mueller@gmail.com>
 */
public class SameTree extends RecombinationAnnotator {

    private enum SummaryStrategy { MEAN, MEDIAN }

    private static class NetworkAnnotatorOptions {
        File inFile;
        File outFile = new File("commonAncestorHeights.tsv");
        String sequence;
        double burninPercentage = 10.0;
        SummaryStrategy summaryStrategy = SummaryStrategy.MEAN;
        boolean rootOnly = false;
        BreakPoints breakPoints = new BreakPoints();

        @Override
        public String toString() {
            return "Active options:\n" +
                    "Input file: " + inFile + "\n" +
                    "Output file: " + outFile + "\n" +
                    "Sequence: " + sequence + "\n" +
                    "Burn-in percentage: " + burninPercentage + "\n" +
                    "Node height and conv. site summary: " + summaryStrategy + "\n" +
            		"Remove Loci for summary: " + breakPoints + "\n" +
            		"root only: " + rootOnly + "\n";
       }
    }


	private static final boolean RecombinationNetworkNode = false;

    public SameTree(NetworkAnnotatorOptions options) throws IOException {
        // Display options:
        System.out.println(options + "\n");
                
        // Initialise reader
        RecombinationLogReader logReader = new RecombinationLogReader(options.inFile,
                options.burninPercentage);

        System.out.println(logReader.getNetworkCount() + " Networks in file.");

        System.out.println("The first " + logReader.getBurnin() +
                 " (" + options.burninPercentage + "%) ACGs will be discarded " +
                "to account for burnin.");
        System.out.println("\nComputing CF clade credibilities...");
        // calculate the network clade credibilities      
        
    	// print the network to file
        System.out.println("\nWriting output to " + options.outFile.getName()
        	+ "...");
        try (PrintStream ps = new PrintStream(options.outFile)) {
        	ps.print("mean\tmax\tevents\n");
	        for (RecombinationNetwork network : logReader){
	        	pruneNetwork(network, options.breakPoints);
	    		List<RecombinationNetworkNode> recombinationNodes = network.getNodes().stream()
	    				.filter(e -> e.isRecombination())
	    				.collect(Collectors.toList());
	    		List<Integer> BPs = new ArrayList<>();
	        	for (RecombinationNetworkNode n : recombinationNodes){
	        		if (n.getParentEdges().get(0).breakPoints.isEmpty() || n.getParentEdges().get(1).breakPoints.isEmpty())
	        			continue;

	        		int bp = Math.max(n.getParentEdges().get(0).passingRange.getMin(), n.getParentEdges().get(1).passingRange.getMin());
	        				
	        		BPs.add(bp);
	        	}
	        	Collections.sort(BPs);
	        	// compute differences
	        	int[] diffs = new int[BPs.size()+1];
	        	diffs[0] = BPs.get(0);
	        	for (int i = 1; i < BPs.size();i++) {
	        		diffs[i] = BPs.get(i)-BPs.get(i-1);
	        	}
	        	diffs[diffs.length-1] = network.totalLength-BPs.get(BPs.size()-1);
	        	double mean=0;
	        	double max = -1;
	        	for (int i = 0; i < diffs.length;i++) {
	        		mean+=diffs[i];
	        		max = Math.max(diffs[i], max);
	        	}
	        	mean/=diffs.length;

	        	ps.print(mean + "\t" + max + "\t" + BPs.size() + "\n");
	        }
        }	
        System.out.println("\nDone!");

        
    }   
    
	
    public static String helpMessage =
            "ACGAnnotator - produces summaries of Bacter ACG log files.\n"
                    + "\n"
                    + "Usage: appstore ACGAnnotator [-help | [options] logFile [outputFile]\n"
                    + "\n"
                    + "Option                   Description\n"
                    + "--------------------------------------------------------------\n"
                    + "-help                    Display usage info.\n"
                    + "-positions {mean,median} Choose position summary method.\n"
                    + "                         (default mean)\n"
                    + "-burnin percentage       Choose _percentage_ of log to discard\n"
                    + "                         in order to remove burn-in period.\n"
                    + "                         (Default 10%)\n"
                    + "-threshold percentage    Choose minimum posterior probability\n"
                    + "                         for including conversion in summary.\n"
                    + "                         (Default 50%)\n"
                    + "-recordGeneFlow gfFile   Record posterior distribution of gene\n"
                    + "                         flow in given file.\n"
                    + "\n"
                    + "If no output file is specified, output is written to a file\n"
                    + "named 'summary.tree'.";

    /**
     * Print usage info and exit.
     */
    public static void printUsageAndExit() {
        System.out.println(helpMessage);
        System.exit(0);
    }

    /**
     * Display error, print usage and exit with error.
     */
    public static void printUsageAndError(String errMsg) {
        System.err.println(errMsg);
        System.err.println(helpMessage);
        System.exit(1);
    }

    /**
     * Main method for ACGAnnotator.  Sets up GUI if needed then
     * uses the ACGAnnotator constructor to actually perform the analysis.
     *
     * @param args command line arguments
     */
    public static void main(String[] args) {
    	NetworkAnnotatorOptions options = new NetworkAnnotatorOptions();
    	
        getCLIOptions(args, options);

        // Run ACGAnnotator
        try {
            new SameTree(options);

        } catch (Exception e) {
            if (args.length == 0) {
                JOptionPane.showMessageDialog(null, e.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                System.err.println("Error: " + e.getMessage());
                e.printStackTrace();
                System.err.println();
                System.err.println(helpMessage);
            }

            System.exit(1);
        }
    }
    
    
    /**
     * Retrieve ACGAnnotator options from command line.
     *
     * @param args command line arguments
     * @param options object to populate with options
     */
    public static void getCLIOptions(String[] args, NetworkAnnotatorOptions options) {
        int i=0;
        while (args[i].startsWith("-")) {
            switch(args[i]) {
                case "-help":
                    printUsageAndExit();
                    break;

                case "-burnin":
                    if (args.length<=i+1)
                        printUsageAndError("-burnin must be followed by a number (percent)");

                    try {
                        options.burninPercentage = Double.parseDouble(args[i+1]);
                    } catch (NumberFormatException e) {
                        printUsageAndError("Error parsing burnin percentage.");
                    }

                    if (options.burninPercentage<0 || options.burninPercentage>100) {
                        printUsageAndError("Burnin percentage must be >= 0 and < 100.");
                    }

                    i += 1;
                    break;

                case "-positions":
                    if (args.length<=i+1) {
                        printUsageAndError("-positions must be followed by either 'MEAN' or 'MEDIAN'.");
                    }

                    if (args[i+1].toLowerCase().equals("mean")) {
                        options.summaryStrategy = SummaryStrategy.MEAN;

                        i += 1;
                        break;
                    }

                    if (args[i+1].toLowerCase().equals("median")) {
                        options.summaryStrategy = SummaryStrategy.MEDIAN;

                        i += 1;
                        break;
                    }

                    printUsageAndError("-positions must be followed by either 'MEAN' or 'MEDIAN'.");

                case "-subsetRange":
                    if (args.length<=i+1) {
                        printUsageAndError("-subsetRange must be a range in the format of 0-100.");
                    }

                    try {
                    	String[] argarray = args[i + 1].split(",");
                    	List<Integer> bp_list = new ArrayList<>();
                    	for (int j = 0; j < argarray.length; j++) {
                    		String[] tmp = argarray[j].split("-");
                    		bp_list.add(Integer.parseInt(tmp[0]));
                    		bp_list.add(Integer.parseInt(tmp[1]));
                    	}
                		options.breakPoints.init(bp_list);
                    } catch (NumberFormatException e) {
                        printUsageAndError("removeSegments must be an array of integers separated by commas if more than one");
                     }

                    i += 1;
                    break;
                    
                case "-sequence":
                    if (args.length<=i+1) {
                        printUsageAndError("-sequence must be followed by a sequence name.");
                    }

                    try {
                		options.sequence = args[i + 1];
                    } catch (NumberFormatException e) {
                        printUsageAndError("removeSegments must be an array of integers separated by commas if more than one");
                     }

                    i += 1;
                    break;
                    
                case "-rootOnly":
                    if (args.length<=i+1) {
                        printUsageAndError("-rootOnly must false or true.");
                    }
                    
                    try {
                        options.rootOnly = Boolean.parseBoolean(args[i+1]);
                    } catch (NumberFormatException e) {
                        printUsageAndError("Error parsing rootOnly.");
                    }

                    i += 1;
                    break;

            }

            i += 1;
        }

        if (i >= args.length)
            printUsageAndError("No input file specified.");
        else
            options.inFile = new File(args[i]);

        if (i+1<args.length)
            options.outFile = new File(args[i+1]);
    }

}